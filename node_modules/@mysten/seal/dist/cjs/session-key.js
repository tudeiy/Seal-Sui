"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var session_key_exports = {};
__export(session_key_exports, {
  RequestFormat: () => RequestFormat,
  SessionKey: () => SessionKey
});
module.exports = __toCommonJS(session_key_exports);
var import_bcs = require("@mysten/bcs");
var import_bcs2 = require("@mysten/sui/bcs");
var import_graphql = require("@mysten/sui/graphql");
var import_ed25519 = require("@mysten/sui/keypairs/ed25519");
var import_utils = require("@mysten/sui/utils");
var import_verify = require("@mysten/sui/verify");
var import_elgamal = require("./elgamal.js");
var import_error = require("./error.js");
var _address, _packageId, _creationTimeMs, _ttlMin, _sessionKey, _personalMessageSignature, _signer;
const RequestFormat = import_bcs2.bcs.struct("RequestFormat", {
  ptb: import_bcs2.bcs.vector(import_bcs2.bcs.U8),
  encKey: import_bcs2.bcs.vector(import_bcs2.bcs.U8),
  encVerificationKey: import_bcs2.bcs.vector(import_bcs2.bcs.U8)
});
class SessionKey {
  constructor({
    address,
    packageId,
    ttlMin,
    signer
  }) {
    __privateAdd(this, _address);
    __privateAdd(this, _packageId);
    __privateAdd(this, _creationTimeMs);
    __privateAdd(this, _ttlMin);
    __privateAdd(this, _sessionKey);
    __privateAdd(this, _personalMessageSignature);
    __privateAdd(this, _signer);
    if (!(0, import_utils.isValidSuiObjectId)(packageId) || !(0, import_utils.isValidSuiAddress)(address)) {
      throw new import_error.UserError(`Invalid package ID ${packageId} or address ${address}`);
    }
    if (ttlMin > 10 || ttlMin < 1) {
      throw new import_error.UserError(`Invalid TTL ${ttlMin}, must be between 1 and 10`);
    }
    __privateSet(this, _address, address);
    __privateSet(this, _packageId, packageId);
    __privateSet(this, _creationTimeMs, Date.now());
    __privateSet(this, _ttlMin, ttlMin);
    __privateSet(this, _sessionKey, import_ed25519.Ed25519Keypair.generate());
    __privateSet(this, _signer, signer);
  }
  isExpired() {
    return __privateGet(this, _creationTimeMs) + __privateGet(this, _ttlMin) * 60 * 1e3 - 1e4 < Date.now();
  }
  getAddress() {
    return __privateGet(this, _address);
  }
  getPackageId() {
    return __privateGet(this, _packageId);
  }
  getPersonalMessage() {
    const creationTimeUtc = new Date(__privateGet(this, _creationTimeMs)).toISOString().slice(0, 19).replace("T", " ") + " UTC";
    const message = `Accessing keys of package ${__privateGet(this, _packageId)} for ${__privateGet(this, _ttlMin)} mins from ${creationTimeUtc}, session key ${(0, import_bcs.toBase64)(__privateGet(this, _sessionKey).getPublicKey().toRawBytes())}`;
    return new TextEncoder().encode(message);
  }
  async setPersonalMessageSignature(personalMessageSignature) {
    try {
      await (0, import_verify.verifyPersonalMessageSignature)(this.getPersonalMessage(), personalMessageSignature, {
        address: __privateGet(this, _address),
        client: new import_graphql.SuiGraphQLClient({
          url: "https://sui-testnet.mystenlabs.com/graphql"
        })
      });
      __privateSet(this, _personalMessageSignature, personalMessageSignature);
    } catch (e) {
      throw new import_error.InvalidPersonalMessageSignatureError("Not valid");
    }
  }
  async getCertificate() {
    if (!__privateGet(this, _personalMessageSignature)) {
      if (__privateGet(this, _signer)) {
        const { signature } = await __privateGet(this, _signer).signPersonalMessage(this.getPersonalMessage());
        __privateSet(this, _personalMessageSignature, signature);
      } else {
        throw new import_error.InvalidPersonalMessageSignatureError("Personal message signature is not set");
      }
    }
    return {
      user: __privateGet(this, _address),
      session_vk: (0, import_bcs.toBase64)(__privateGet(this, _sessionKey).getPublicKey().toRawBytes()),
      creation_time: __privateGet(this, _creationTimeMs),
      ttl_min: __privateGet(this, _ttlMin),
      signature: __privateGet(this, _personalMessageSignature)
    };
  }
  async createRequestParams(txBytes) {
    if (this.isExpired()) {
      throw new import_error.ExpiredSessionKeyError();
    }
    const egSk = (0, import_elgamal.generateSecretKey)();
    const msgToSign = RequestFormat.serialize({
      ptb: txBytes.slice(1),
      encKey: (0, import_elgamal.toPublicKey)(egSk),
      encVerificationKey: (0, import_elgamal.toVerificationKey)(egSk)
    }).toBytes();
    return {
      decryptionKey: egSk,
      requestSignature: (0, import_bcs.toBase64)(await __privateGet(this, _sessionKey).sign(msgToSign))
    };
  }
}
_address = new WeakMap();
_packageId = new WeakMap();
_creationTimeMs = new WeakMap();
_ttlMin = new WeakMap();
_sessionKey = new WeakMap();
_personalMessageSignature = new WeakMap();
_signer = new WeakMap();
//# sourceMappingURL=session-key.js.map
