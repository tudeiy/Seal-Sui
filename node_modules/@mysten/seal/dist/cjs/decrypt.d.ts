import type { EncryptedObject } from './bcs.js';
import type { G1Element } from './bls12381.js';
import type { KeyCacheKey } from './types.js';
export interface DecryptOptions {
    encryptedObject: typeof EncryptedObject.$inferType;
    keys: Map<KeyCacheKey, G1Element>;
}
/**
 * Decrypt the given encrypted bytes with the given cached secret keys for the full ID.
 * It's assumed that fetchKeys has been called to fetch the secret keys for enough key servers
 * otherwise, this will throw an error.
 *
 * @returns - The decrypted plaintext corresponding to ciphertext.
 */
export declare function decrypt({ encryptedObject, keys }: DecryptOptions): Promise<Uint8Array>;
