import type { EncryptionInput } from './dem.js';
import type { KeyServer } from './key-server.js';
export declare const MAX_U8 = 255;
/**
 * Given full ID and what key servers to use, return the encrypted message under the identity and return the bcs bytes of the encrypted object.
 *
 * @param keyServers - A list of KeyServers (same server can be used multiple times)
 * @param kemType - The type of KEM to use.
 * @param packageId - packageId
 * @param id - id
 * @param encryptionInput - Input to the encryption. Should be one of the EncryptionInput types, AesGcmEncryptionInput or Plain.
 * @param threshold - The threshold for the TSS encryption.
 * @returns The bcs bytes of the encrypted object containing all metadata and the 256-bit symmetric key that was used to encrypt the object.
 * Since the key can be used to decrypt, it should not be shared but can be used eg. for backup.
 */
export declare function encrypt({ keyServers, kemType, threshold, packageId, id, encryptionInput, }: {
    keyServers: KeyServer[];
    kemType: KemType;
    threshold: number;
    packageId: string;
    id: string;
    encryptionInput: EncryptionInput;
}): Promise<{
    encryptedObject: Uint8Array;
    key: Uint8Array;
}>;
export declare enum KemType {
    BonehFranklinBLS12381DemCCA = 0
}
export declare enum DemType {
    AesGcm256 = 0,
    Hmac256Ctr = 1
}
