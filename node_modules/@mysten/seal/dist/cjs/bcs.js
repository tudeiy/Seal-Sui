"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bcs_exports = {};
__export(bcs_exports, {
  Ciphertext: () => Ciphertext,
  EncryptedObject: () => EncryptedObject,
  IBEEncryptions: () => IBEEncryptions,
  KeyServerMove: () => KeyServerMove
});
module.exports = __toCommonJS(bcs_exports);
var import_bcs = require("@mysten/bcs");
var import_bcs2 = require("@mysten/sui/bcs");
const IBEEncryptions = import_bcs2.bcs.enum("IBEEncryptions", {
  BonehFranklinBLS12381: import_bcs2.bcs.struct("BonehFranklinBLS12381", {
    nonce: import_bcs2.bcs.bytes(96),
    encryptedShares: import_bcs2.bcs.vector(import_bcs2.bcs.bytes(32)),
    encryptedRandomness: import_bcs2.bcs.bytes(32)
  })
});
const Ciphertext = import_bcs2.bcs.enum("Ciphertext", {
  Aes256Gcm: import_bcs2.bcs.struct("Aes256Gcm", {
    blob: import_bcs2.bcs.vector(import_bcs2.bcs.U8),
    aad: import_bcs2.bcs.option(import_bcs2.bcs.vector(import_bcs2.bcs.U8))
  }),
  Hmac256Ctr: import_bcs2.bcs.struct("Hmac256Ctr", {
    blob: import_bcs2.bcs.vector(import_bcs2.bcs.U8),
    aad: import_bcs2.bcs.option(import_bcs2.bcs.vector(import_bcs2.bcs.U8)),
    mac: import_bcs2.bcs.bytes(32)
  }),
  Plain: import_bcs2.bcs.struct("Plain", {})
});
const EncryptedObject = import_bcs2.bcs.struct("EncryptedObject", {
  version: import_bcs2.bcs.U8,
  packageId: import_bcs2.bcs.Address,
  id: import_bcs2.bcs.vector(import_bcs2.bcs.U8).transform({
    output: (val) => (0, import_bcs.toHex)(new Uint8Array(val)),
    input: (val) => (0, import_bcs.fromHex)(val)
  }),
  services: import_bcs2.bcs.vector(import_bcs2.bcs.tuple([import_bcs2.bcs.Address, import_bcs2.bcs.U8])),
  threshold: import_bcs2.bcs.U8,
  encryptedShares: IBEEncryptions,
  ciphertext: Ciphertext
});
const KeyServerMove = import_bcs2.bcs.struct("KeyServer", {
  id: import_bcs2.bcs.Address,
  name: import_bcs2.bcs.string(),
  url: import_bcs2.bcs.string(),
  keyType: import_bcs2.bcs.u8(),
  pk: import_bcs2.bcs.vector(import_bcs2.bcs.u8())
});
//# sourceMappingURL=bcs.js.map
