"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var decrypt_exports = {};
__export(decrypt_exports, {
  decrypt: () => decrypt
});
module.exports = __toCommonJS(decrypt_exports);
var import_bcs = require("@mysten/bcs");
var import_shamir_secret_sharing = require("shamir-secret-sharing");
var import_bls12381 = require("./bls12381.js");
var import_dem = require("./dem.js");
var import_error = require("./error.js");
var import_ibe = require("./ibe.js");
var import_kdf = require("./kdf.js");
var import_utils = require("./utils.js");
async function decrypt({ encryptedObject, keys }) {
  if (!encryptedObject.encryptedShares.BonehFranklinBLS12381) {
    throw new import_error.UnsupportedFeatureError("Encryption mode not supported");
  }
  const fullId = (0, import_utils.createFullId)(import_ibe.DST, encryptedObject.packageId, encryptedObject.id);
  const inKeystore = encryptedObject.services.map((_, i) => i).filter((i) => keys.has(`${fullId}:${encryptedObject.services[i][0]}`));
  if (inKeystore.length < encryptedObject.threshold) {
    throw new Error("Not enough shares. Please fetch more keys.");
  }
  const encryptedShares = encryptedObject.encryptedShares.BonehFranklinBLS12381.encryptedShares;
  if (encryptedShares.length !== encryptedObject.services.length) {
    throw new import_error.InvalidCiphertextError(
      `Mismatched shares ${encryptedShares.length} and services ${encryptedObject.services.length}`
    );
  }
  const nonce = import_bls12381.G2Element.fromBytes(encryptedObject.encryptedShares.BonehFranklinBLS12381.nonce);
  const shares = inKeystore.map((i) => {
    const [objectId, index] = encryptedObject.services[i];
    const share = import_ibe.BonehFranklinBLS12381Services.decrypt(
      nonce,
      keys.get(`${fullId}:${objectId}`),
      encryptedShares[i],
      (0, import_bcs.fromHex)(fullId),
      [objectId, index]
    );
    return { index, share };
  });
  const key = await combine(shares);
  const demKey = (0, import_kdf.deriveKey)(import_kdf.KeyPurpose.DEM, key);
  if (encryptedObject.ciphertext.Aes256Gcm) {
    try {
      return import_dem.AesGcm256.decrypt(demKey, encryptedObject.ciphertext);
    } catch {
      throw new Error("Decryption failed");
    }
  } else if (encryptedObject.ciphertext.Plain) {
    return demKey;
  } else if (encryptedObject.ciphertext.Hmac256Ctr) {
    try {
      return import_dem.Hmac256Ctr.decrypt(demKey, encryptedObject.ciphertext);
    } catch {
      throw new Error("Decryption failed");
    }
  } else {
    throw new Error("Invalid encrypted object");
  }
}
async function combine(shares) {
  if (shares.length === 0) {
    throw new Error("Invalid shares length");
  } else if (shares.length === 1) {
    return Promise.resolve(shares[0].share);
  }
  return (0, import_shamir_secret_sharing.combine)(
    shares.map(({ index, share }) => {
      const packedShare = new Uint8Array(share.length + 1);
      packedShare.set(share, 0);
      packedShare[share.length] = index;
      return packedShare;
    })
  );
}
//# sourceMappingURL=decrypt.js.map
