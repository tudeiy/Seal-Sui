"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var keys_exports = {};
__export(keys_exports, {
  fetchKeysForAllIds: () => fetchKeysForAllIds
});
module.exports = __toCommonJS(keys_exports);
var import_bcs = require("@mysten/bcs");
var import_elgamal = require("./elgamal.js");
var import_error = require("./error.js");
var import_version = require("./version.js");
async function fetchKeysForAllIds(url, requestSig, txBytes, encKey, certificate, timeout, signal) {
  const encKeyPk = (0, import_elgamal.toPublicKey)(encKey);
  const encVerificationKey = (0, import_elgamal.toVerificationKey)(encKey);
  const body = {
    ptb: (0, import_bcs.toBase64)(txBytes.slice(1)),
    // removes the byte of the transaction type version
    enc_key: (0, import_bcs.toBase64)(encKeyPk),
    enc_verification_key: (0, import_bcs.toBase64)(encVerificationKey),
    request_signature: requestSig,
    // already b64
    certificate
  };
  const timeoutSignal = AbortSignal.timeout(timeout);
  const combinedSignal = signal ? AbortSignal.any([signal, timeoutSignal]) : timeoutSignal;
  const requestId = crypto.randomUUID();
  const response = await fetch(url + "/v1/fetch_key", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Request-Id": requestId,
      "Client-Sdk-Type": "typescript",
      "Client-Sdk-Version": import_version.PACKAGE_VERSION
    },
    body: JSON.stringify(body),
    signal: combinedSignal
  });
  await import_error.SealAPIError.assertResponse(response, requestId);
  const resp = await response.json();
  return resp.decryption_keys.map((dk) => ({
    fullId: (0, import_bcs.toHex)(new Uint8Array(dk.id)),
    key: (0, import_elgamal.elgamalDecrypt)(encKey, dk.encrypted_key.map(import_bcs.fromBase64))
  }));
}
//# sourceMappingURL=keys.js.map
