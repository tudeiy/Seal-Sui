import type { IBEEncryptions } from './bcs.js';
import { G1Element, G2Element } from './bls12381.js';
import type { KeyServer } from './key-server.js';
/**
 * The domain separation tag for the hash-to-group function.
 */
export declare const DST: Uint8Array;
/**
 * The domain separation tag for the signing proof of possession.
 */
export declare const DST_POP: Uint8Array;
/**
 * The interface for the key servers.
 */
export declare abstract class IBEServers {
    objectIds: string[];
    constructor(objectIds: string[]);
    /**
     * The number of key servers.
     */
    size(): number;
    /**
     * Encrypt a batch of messages for the given identity.
     *
     * @param id The identity.
     * @param msgAndIndices The messages and the corresponding indices of the share being encrypted.
     * @returns The encrypted messages.
     */
    abstract encryptBatched(id: Uint8Array, msgAndIndices: {
        msg: Uint8Array;
        index: number;
    }[], randomnessKey: Uint8Array): typeof IBEEncryptions.$inferType;
}
/**
 * Identity-based encryption based on the Boneh-Franklin IBE scheme.
 * This object represents a set of key servers that can be used to encrypt messages for a given identity.
 */
export declare class BonehFranklinBLS12381Services extends IBEServers {
    readonly publicKeys: G2Element[];
    constructor(services: KeyServer[]);
    encryptBatched(id: Uint8Array, msgAndIndices: {
        msg: Uint8Array;
        index: number;
    }[], randomnessKey: Uint8Array): typeof IBEEncryptions.$inferType;
    /**
     * Returns true if the user secret key is valid for the given public key and id.
     * @param user_secret_key - The user secret key.
     * @param id - The identity.
     * @param public_key - The public key.
     * @returns True if the user secret key is valid for the given public key and id.
     */
    static verifyUserSecretKey(userSecretKey: G1Element, id: string, publicKey: G2Element): boolean;
    /**
     * Identity-based decryption.
     *
     * @param nonce The encryption nonce.
     * @param sk The user secret key.
     * @param ciphertext The encrypted message.
     * @param info An info parameter also included in the KDF.
     * @returns The decrypted message.
     */
    static decrypt(nonce: G2Element, sk: G1Element, ciphertext: Uint8Array, id: Uint8Array, [objectId, index]: [string, number]): Uint8Array;
}
