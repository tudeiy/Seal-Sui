"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var utils_exports = {};
__export(utils_exports, {
  createFullId: () => createFullId,
  xor: () => xor,
  xorUnchecked: () => xorUnchecked
});
module.exports = __toCommonJS(utils_exports);
var import_bcs = require("@mysten/bcs");
var import_utils = require("@mysten/sui/utils");
var import_error = require("./error.js");
function xor(a, b) {
  if (a.length !== b.length) {
    throw new Error("Invalid input");
  }
  return xorUnchecked(a, b);
}
function xorUnchecked(a, b) {
  return a.map((ai, i) => ai ^ b[i]);
}
function createFullId(dst, packageId, innerId) {
  if (!(0, import_utils.isValidSuiObjectId)(packageId)) {
    throw new import_error.UserError(`Invalid package ID ${packageId}`);
  }
  const packageIdBytes = (0, import_bcs.fromHex)(packageId);
  const innerIdBytes = (0, import_bcs.fromHex)(innerId);
  const fullId = new Uint8Array(1 + dst.length + packageIdBytes.length + innerIdBytes.length);
  fullId.set([dst.length], 0);
  fullId.set(dst, 1);
  fullId.set(packageIdBytes, 1 + dst.length);
  fullId.set(innerIdBytes, 1 + dst.length + packageIdBytes.length);
  return (0, import_bcs.toHex)(fullId);
}
//# sourceMappingURL=utils.js.map
