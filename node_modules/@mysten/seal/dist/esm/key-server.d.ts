import type { SuiClient } from '@mysten/sui/client';
export type KeyServer = {
    objectId: string;
    name: string;
    url: string;
    keyType: KeyServerType;
    pk: Uint8Array;
};
export declare enum KeyServerType {
    BonehFranklinBLS12381 = 0
}
/**
 * Returns a static list of Seal key server object ids that the dapp can choose to use.
 * @param network - The network to use.
 * @returns The object id's of the key servers.
 */
export declare function getAllowlistedKeyServers(network: 'testnet' | 'mainnet'): string[];
/**
 * Given a list of key server object IDs, returns a list of SealKeyServer
 * from onchain state containing name, objectId, URL and pk.
 *
 * @param objectIds - The key server object IDs.
 * @param client - The SuiClient to use.
 * @returns - An array of SealKeyServer.
 */
export declare function retrieveKeyServers({ objectIds, client, }: {
    objectIds: string[];
    client: SuiClient;
}): Promise<KeyServer[]>;
/**
 * Given a KeyServer, fetch the proof of possession (PoP) from the URL and verify it
 * against the pubkey. This should be used only rarely when the dapp uses a dynamic
 * set of key servers.
 *
 * @param server - The KeyServer to verify.
 * @returns - True if the key server is valid, false otherwise.
 */
export declare function verifyKeyServer(server: KeyServer, timeout: number): Promise<boolean>;
