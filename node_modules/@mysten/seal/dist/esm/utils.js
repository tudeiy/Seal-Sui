import { fromHex, toHex } from "@mysten/bcs";
import { isValidSuiObjectId } from "@mysten/sui/utils";
import { UserError } from "./error.js";
function xor(a, b) {
  if (a.length !== b.length) {
    throw new Error("Invalid input");
  }
  return xorUnchecked(a, b);
}
function xorUnchecked(a, b) {
  return a.map((ai, i) => ai ^ b[i]);
}
function createFullId(dst, packageId, innerId) {
  if (!isValidSuiObjectId(packageId)) {
    throw new UserError(`Invalid package ID ${packageId}`);
  }
  const packageIdBytes = fromHex(packageId);
  const innerIdBytes = fromHex(innerId);
  const fullId = new Uint8Array(1 + dst.length + packageIdBytes.length + innerIdBytes.length);
  fullId.set([dst.length], 0);
  fullId.set(dst, 1);
  fullId.set(packageIdBytes, 1 + dst.length);
  fullId.set(innerIdBytes, 1 + dst.length + packageIdBytes.length);
  return toHex(fullId);
}
export {
  createFullId,
  xor,
  xorUnchecked
};
//# sourceMappingURL=utils.js.map
