import { fromHex, toHex } from "@mysten/bcs";
import { bcs } from "@mysten/sui/bcs";
const IBEEncryptions = bcs.enum("IBEEncryptions", {
  BonehFranklinBLS12381: bcs.struct("BonehFranklinBLS12381", {
    nonce: bcs.bytes(96),
    encryptedShares: bcs.vector(bcs.bytes(32)),
    encryptedRandomness: bcs.bytes(32)
  })
});
const Ciphertext = bcs.enum("Ciphertext", {
  Aes256Gcm: bcs.struct("Aes256Gcm", {
    blob: bcs.vector(bcs.U8),
    aad: bcs.option(bcs.vector(bcs.U8))
  }),
  Hmac256Ctr: bcs.struct("Hmac256Ctr", {
    blob: bcs.vector(bcs.U8),
    aad: bcs.option(bcs.vector(bcs.U8)),
    mac: bcs.bytes(32)
  }),
  Plain: bcs.struct("Plain", {})
});
const EncryptedObject = bcs.struct("EncryptedObject", {
  version: bcs.U8,
  packageId: bcs.Address,
  id: bcs.vector(bcs.U8).transform({
    output: (val) => toHex(new Uint8Array(val)),
    input: (val) => fromHex(val)
  }),
  services: bcs.vector(bcs.tuple([bcs.Address, bcs.U8])),
  threshold: bcs.U8,
  encryptedShares: IBEEncryptions,
  ciphertext: Ciphertext
});
const KeyServerMove = bcs.struct("KeyServer", {
  id: bcs.Address,
  name: bcs.string(),
  url: bcs.string(),
  keyType: bcs.u8(),
  pk: bcs.vector(bcs.u8())
});
export {
  Ciphertext,
  EncryptedObject,
  IBEEncryptions,
  KeyServerMove
};
//# sourceMappingURL=bcs.js.map
