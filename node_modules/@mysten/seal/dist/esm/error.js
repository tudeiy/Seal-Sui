var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var _SealAPIError_static, generate_fn;
class SealError extends Error {
}
class UserError extends SealError {
}
const _SealAPIError = class _SealAPIError extends SealError {
  constructor(message, requestId, status) {
    super(message);
    this.requestId = requestId;
    this.status = status;
  }
  static async assertResponse(response, requestId) {
    var _a;
    if (response.ok) {
      return;
    }
    let errorInstance;
    try {
      const text = await response.text();
      const error = JSON.parse(text)["error"];
      errorInstance = __privateMethod(_a = _SealAPIError, _SealAPIError_static, generate_fn).call(_a, error, requestId);
    } catch (e) {
      errorInstance = new GeneralError(response.statusText, requestId, response.status);
    }
    throw errorInstance;
  }
};
_SealAPIError_static = new WeakSet();
generate_fn = function(message, requestId, status) {
  switch (message) {
    case "InvalidPTB":
      return new InvalidPTBError(requestId);
    case "InvalidPackage":
      return new InvalidPackageError(requestId);
    case "NoAccess":
      return new NoAccessError(requestId);
    case "InvalidCertificate":
      return new ExpiredSessionKeyError(requestId);
    case "OldPackageVersion":
      return new OldPackageError(requestId);
    case "InvalidSignature":
      return new InvalidUserSignatureError(requestId);
    case "InvalidSessionSignature":
      return new InvalidSessionKeySignatureError(requestId);
    case "Failure":
      return new InternalError(requestId);
    default:
      return new GeneralError(message, requestId, status);
  }
};
__privateAdd(_SealAPIError, _SealAPIError_static);
let SealAPIError = _SealAPIError;
class InvalidPTBError extends SealAPIError {
  constructor(requestId) {
    super("PTB does not conform to the expected format", requestId);
  }
}
class InvalidPackageError extends SealAPIError {
  constructor(requestId) {
    super("Package ID used in PTB is invalid", requestId);
  }
}
class OldPackageError extends SealAPIError {
  constructor(requestId) {
    super("PTB must call the latest version of the package", requestId);
  }
}
class InvalidUserSignatureError extends SealAPIError {
  constructor(requestId) {
    super("User signature on the session key is invalid", requestId);
  }
}
class InvalidSessionKeySignatureError extends SealAPIError {
  constructor(requestId) {
    super("Session key signature is invalid", requestId);
  }
}
class NoAccessError extends SealAPIError {
  constructor(requestId) {
    super("User does not have access to one or more of the requested keys", requestId);
  }
}
class ExpiredSessionKeyError extends SealAPIError {
  constructor(requestId) {
    super("Session key has expired", requestId);
  }
}
class InternalError extends SealAPIError {
  constructor(requestId) {
    super("Internal server error, caller should retry", requestId);
  }
}
class GeneralError extends SealAPIError {
}
class InvalidPersonalMessageSignatureError extends UserError {
}
class InvalidGetObjectError extends UserError {
}
class UnsupportedFeatureError extends UserError {
}
class UnsupportedNetworkError extends UserError {
}
class InvalidKeyServerError extends UserError {
}
class InvalidCiphertextError extends UserError {
}
class InvalidThresholdError extends UserError {
}
class InconsistentKeyServersError extends UserError {
}
function toMajorityError(errors) {
  let maxCount = 0;
  let majorityError = errors[0];
  const counts = /* @__PURE__ */ new Map();
  for (const error of errors) {
    const errorName = error.constructor.name;
    const newCount = (counts.get(errorName) || 0) + 1;
    counts.set(errorName, newCount);
    if (newCount > maxCount) {
      maxCount = newCount;
      majorityError = error;
    }
  }
  return majorityError;
}
export {
  ExpiredSessionKeyError,
  GeneralError,
  InconsistentKeyServersError,
  InternalError,
  InvalidCiphertextError,
  InvalidGetObjectError,
  InvalidKeyServerError,
  InvalidPTBError,
  InvalidPackageError,
  InvalidPersonalMessageSignatureError,
  InvalidSessionKeySignatureError,
  InvalidThresholdError,
  InvalidUserSignatureError,
  NoAccessError,
  OldPackageError,
  SealAPIError,
  SealError,
  UnsupportedFeatureError,
  UnsupportedNetworkError,
  UserError,
  toMajorityError
};
//# sourceMappingURL=error.js.map
