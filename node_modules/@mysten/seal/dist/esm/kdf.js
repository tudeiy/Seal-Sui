import { fromHex } from "@mysten/bcs";
import { hkdf } from "@noble/hashes/hkdf";
import { hmac } from "@noble/hashes/hmac";
import { sha3_256 } from "@noble/hashes/sha3";
import { G1Element } from "./bls12381.js";
function kdf(element, nonce, id, objectId, index) {
  const GT_ELEMENT_BYTE_LENGTH = 576;
  const PERMUTATION = [0, 2, 4, 1, 3, 5];
  const COEFFICIENT_SIZE = GT_ELEMENT_BYTE_LENGTH / PERMUTATION.length;
  const bytes = element.toBytes();
  let permutedBytes = new Uint8Array(GT_ELEMENT_BYTE_LENGTH);
  PERMUTATION.forEach((pi, i) => {
    permutedBytes.set(
      bytes.slice(i * COEFFICIENT_SIZE, (i + 1) * COEFFICIENT_SIZE),
      pi * COEFFICIENT_SIZE
    );
  });
  const inputBytes = new Uint8Array([
    ...permutedBytes,
    ...nonce.toBytes(),
    ...G1Element.hashToCurve(id).toBytes()
  ]);
  const info = new Uint8Array([...fromHex(objectId), index]);
  return hkdf(sha3_256, inputBytes, "", info, 32);
}
var KeyPurpose = /* @__PURE__ */ ((KeyPurpose2) => {
  KeyPurpose2[KeyPurpose2["EncryptedRandomness"] = 0] = "EncryptedRandomness";
  KeyPurpose2[KeyPurpose2["DEM"] = 1] = "DEM";
  return KeyPurpose2;
})(KeyPurpose || {});
function deriveKey(purpose, baseKey) {
  switch (purpose) {
    case 0 /* EncryptedRandomness */:
      return hmac(sha3_256, baseKey, new Uint8Array([0]));
    case 1 /* DEM */:
      return hmac(sha3_256, baseKey, new Uint8Array([1]));
  }
}
export {
  KeyPurpose,
  deriveKey,
  kdf
};
//# sourceMappingURL=kdf.js.map
