import { toHex } from "@mysten/bcs";
import { bls12_381 } from "@noble/curves/bls12-381";
class G1Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new G1Element(bls12_381.G1.ProjectivePoint.BASE);
  }
  static fromBytes(bytes) {
    return new G1Element(bls12_381.G1.ProjectivePoint.fromHex(toHex(bytes)));
  }
  toBytes() {
    return this.point.toRawBytes();
  }
  multiply(scalar) {
    return new G1Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new G1Element(this.point.add(other.point));
  }
  subtract(other) {
    return new G1Element(this.point.subtract(other.point));
  }
  static hashToCurve(data) {
    return new G1Element(
      bls12_381.G1.ProjectivePoint.fromAffine(bls12_381.G1.hashToCurve(data).toAffine())
    );
  }
  pairing(other) {
    return new GTElement(bls12_381.pairing(this.point, other.point));
  }
}
class G2Element {
  constructor(point) {
    this.point = point;
  }
  static generator() {
    return new G2Element(bls12_381.G2.ProjectivePoint.BASE);
  }
  static fromBytes(bytes) {
    return new G2Element(bls12_381.G2.ProjectivePoint.fromHex(toHex(bytes)));
  }
  toBytes() {
    return this.point.toRawBytes();
  }
  multiply(scalar) {
    return new G2Element(this.point.multiply(scalar.scalar));
  }
  add(other) {
    return new G2Element(this.point.add(other.point));
  }
  hashToCurve(data) {
    return new G2Element(
      bls12_381.G2.ProjectivePoint.fromAffine(bls12_381.G2.hashToCurve(data).toAffine())
    );
  }
}
class GTElement {
  constructor(element) {
    this.element = element;
  }
  toBytes() {
    return bls12_381.fields.Fp12.toBytes(this.element);
  }
}
class Scalar {
  constructor(scalar) {
    this.scalar = scalar;
  }
  static random() {
    return Scalar.fromBytes(bls12_381.utils.randomPrivateKey());
  }
  toBytes() {
    return new Uint8Array(bls12_381.fields.Fr.toBytes(this.scalar));
  }
  static fromBytes(bytes) {
    return new Scalar(bls12_381.fields.Fr.fromBytes(bytes));
  }
  static fromNumber(num) {
    return new Scalar(BigInt(num));
  }
}
export {
  G1Element,
  G2Element,
  GTElement,
  Scalar
};
//# sourceMappingURL=bls12381.js.map
