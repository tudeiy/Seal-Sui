import { fromHex } from "@mysten/bcs";
import { combine as externalCombine } from "shamir-secret-sharing";
import { G2Element } from "./bls12381.js";
import { AesGcm256, Hmac256Ctr } from "./dem.js";
import { InvalidCiphertextError, UnsupportedFeatureError } from "./error.js";
import { BonehFranklinBLS12381Services, DST } from "./ibe.js";
import { deriveKey, KeyPurpose } from "./kdf.js";
import { createFullId } from "./utils.js";
async function decrypt({ encryptedObject, keys }) {
  if (!encryptedObject.encryptedShares.BonehFranklinBLS12381) {
    throw new UnsupportedFeatureError("Encryption mode not supported");
  }
  const fullId = createFullId(DST, encryptedObject.packageId, encryptedObject.id);
  const inKeystore = encryptedObject.services.map((_, i) => i).filter((i) => keys.has(`${fullId}:${encryptedObject.services[i][0]}`));
  if (inKeystore.length < encryptedObject.threshold) {
    throw new Error("Not enough shares. Please fetch more keys.");
  }
  const encryptedShares = encryptedObject.encryptedShares.BonehFranklinBLS12381.encryptedShares;
  if (encryptedShares.length !== encryptedObject.services.length) {
    throw new InvalidCiphertextError(
      `Mismatched shares ${encryptedShares.length} and services ${encryptedObject.services.length}`
    );
  }
  const nonce = G2Element.fromBytes(encryptedObject.encryptedShares.BonehFranklinBLS12381.nonce);
  const shares = inKeystore.map((i) => {
    const [objectId, index] = encryptedObject.services[i];
    const share = BonehFranklinBLS12381Services.decrypt(
      nonce,
      keys.get(`${fullId}:${objectId}`),
      encryptedShares[i],
      fromHex(fullId),
      [objectId, index]
    );
    return { index, share };
  });
  const key = await combine(shares);
  const demKey = deriveKey(KeyPurpose.DEM, key);
  if (encryptedObject.ciphertext.Aes256Gcm) {
    try {
      return AesGcm256.decrypt(demKey, encryptedObject.ciphertext);
    } catch {
      throw new Error("Decryption failed");
    }
  } else if (encryptedObject.ciphertext.Plain) {
    return demKey;
  } else if (encryptedObject.ciphertext.Hmac256Ctr) {
    try {
      return Hmac256Ctr.decrypt(demKey, encryptedObject.ciphertext);
    } catch {
      throw new Error("Decryption failed");
    }
  } else {
    throw new Error("Invalid encrypted object");
  }
}
async function combine(shares) {
  if (shares.length === 0) {
    throw new Error("Invalid shares length");
  } else if (shares.length === 1) {
    return Promise.resolve(shares[0].share);
  }
  return externalCombine(
    shares.map(({ index, share }) => {
      const packedShare = new Uint8Array(share.length + 1);
      packedShare.set(share, 0);
      packedShare[share.length] = index;
      return packedShare;
    })
  );
}
export {
  decrypt
};
//# sourceMappingURL=decrypt.js.map
