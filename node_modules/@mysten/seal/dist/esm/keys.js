import { fromBase64, toBase64, toHex } from "@mysten/bcs";
import { elgamalDecrypt, toPublicKey, toVerificationKey } from "./elgamal.js";
import { SealAPIError } from "./error.js";
import { PACKAGE_VERSION } from "./version.js";
async function fetchKeysForAllIds(url, requestSig, txBytes, encKey, certificate, timeout, signal) {
  const encKeyPk = toPublicKey(encKey);
  const encVerificationKey = toVerificationKey(encKey);
  const body = {
    ptb: toBase64(txBytes.slice(1)),
    // removes the byte of the transaction type version
    enc_key: toBase64(encKeyPk),
    enc_verification_key: toBase64(encVerificationKey),
    request_signature: requestSig,
    // already b64
    certificate
  };
  const timeoutSignal = AbortSignal.timeout(timeout);
  const combinedSignal = signal ? AbortSignal.any([signal, timeoutSignal]) : timeoutSignal;
  const requestId = crypto.randomUUID();
  const response = await fetch(url + "/v1/fetch_key", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Request-Id": requestId,
      "Client-Sdk-Type": "typescript",
      "Client-Sdk-Version": PACKAGE_VERSION
    },
    body: JSON.stringify(body),
    signal: combinedSignal
  });
  await SealAPIError.assertResponse(response, requestId);
  const resp = await response.json();
  return resp.decryption_keys.map((dk) => ({
    fullId: toHex(new Uint8Array(dk.id)),
    key: elgamalDecrypt(encKey, dk.encrypted_key.map(fromBase64))
  }));
}
export {
  fetchKeysForAllIds
};
//# sourceMappingURL=keys.js.map
