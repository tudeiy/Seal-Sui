import { fromHex } from "@mysten/bcs";
import { isValidSuiObjectId } from "@mysten/sui/utils";
import { split as externalSplit } from "shamir-secret-sharing";
import { EncryptedObject } from "./bcs.js";
import { UserError } from "./error.js";
import { BonehFranklinBLS12381Services, DST } from "./ibe.js";
import { deriveKey, KeyPurpose } from "./kdf.js";
import { createFullId } from "./utils.js";
const MAX_U8 = 255;
async function encrypt({
  keyServers,
  kemType,
  threshold,
  packageId,
  id,
  encryptionInput
}) {
  if (keyServers.length < threshold || threshold === 0 || keyServers.length > MAX_U8 || threshold > MAX_U8 || !isValidSuiObjectId(packageId)) {
    throw new UserError(
      `Invalid key servers or threshold ${threshold} for ${keyServers.length} key servers for package ${packageId}`
    );
  }
  const key = await encryptionInput.generateKey();
  const demKey = deriveKey(KeyPurpose.DEM, key);
  const ciphertext = await encryptionInput.encrypt(demKey);
  const shares = await split(key, keyServers.length, threshold);
  const fullId = createFullId(DST, packageId, id);
  const encryptedShares = encryptBatched(
    keyServers,
    kemType,
    fromHex(fullId),
    shares.map(({ share, index }) => ({
      msg: share,
      index
    })),
    deriveKey(KeyPurpose.EncryptedRandomness, key)
  );
  const services = keyServers.map((server, i) => [
    server.objectId,
    shares[i].index
  ]);
  return {
    encryptedObject: EncryptedObject.serialize({
      version: 0,
      packageId,
      id,
      services,
      threshold,
      encryptedShares,
      ciphertext
    }).toBytes(),
    key: demKey
  };
}
var KemType = /* @__PURE__ */ ((KemType2) => {
  KemType2[KemType2["BonehFranklinBLS12381DemCCA"] = 0] = "BonehFranklinBLS12381DemCCA";
  return KemType2;
})(KemType || {});
var DemType = /* @__PURE__ */ ((DemType2) => {
  DemType2[DemType2["AesGcm256"] = 0] = "AesGcm256";
  DemType2[DemType2["Hmac256Ctr"] = 1] = "Hmac256Ctr";
  return DemType2;
})(DemType || {});
function encryptBatched(keyServers, kemType, id, shares, randomnessKey) {
  switch (kemType) {
    case 0 /* BonehFranklinBLS12381DemCCA */:
      return new BonehFranklinBLS12381Services(keyServers).encryptBatched(
        id,
        shares,
        randomnessKey
      );
  }
}
async function split(secret, n, threshold) {
  if (n === 0 || threshold === 0 || threshold > n) {
    throw new Error("Invalid threshold or number of shares");
  } else if (threshold === 1) {
    const result = [];
    for (let i = 0; i < n; i++) {
      result.push({ share: secret, index: i });
    }
    return Promise.resolve(result);
  }
  return externalSplit(secret, n, threshold).then(
    (share) => share.map((s) => ({
      share: s.subarray(0, s.length - 1),
      // split() returns the share index in the last byte
      index: s[s.length - 1]
    }))
  );
}
export {
  DemType,
  KemType,
  MAX_U8,
  encrypt
};
//# sourceMappingURL=encrypt.js.map
