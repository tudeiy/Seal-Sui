export declare const IBEEncryptions: import("@mysten/bcs").BcsType<{
    BonehFranklinBLS12381: {
        nonce: Uint8Array<ArrayBufferLike>;
        encryptedShares: Uint8Array<ArrayBufferLike>[];
        encryptedRandomness: Uint8Array<ArrayBufferLike>;
    };
    $kind: "BonehFranklinBLS12381";
}, {
    BonehFranklinBLS12381: {
        nonce: Iterable<number>;
        encryptedShares: Iterable<Iterable<number>> & {
            length: number;
        };
        encryptedRandomness: Iterable<number>;
    };
}>;
export declare const Ciphertext: import("@mysten/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Aes256Gcm: {
        blob: number[];
        aad: number[] | null;
    };
    Hmac256Ctr: {
        blob: number[];
        aad: number[] | null;
        mac: Uint8Array<ArrayBufferLike>;
    };
    Plain: {};
}, "Aes256Gcm" | "Hmac256Ctr" | "Plain">, import("@mysten/bcs").EnumInputShape<{
    Aes256Gcm: {
        blob: Iterable<number> & {
            length: number;
        };
        aad: (Iterable<number> & {
            length: number;
        }) | null | undefined;
    };
    Hmac256Ctr: {
        blob: Iterable<number> & {
            length: number;
        };
        aad: (Iterable<number> & {
            length: number;
        }) | null | undefined;
        mac: Iterable<number>;
    };
    Plain: {};
}>>;
/**
 * The encrypted object format. Should be aligned with the Rust implementation.
 */
export declare const EncryptedObject: import("@mysten/bcs").BcsType<{
    version: number;
    packageId: string;
    id: string;
    services: [string, number][];
    threshold: number;
    encryptedShares: {
        BonehFranklinBLS12381: {
            nonce: Uint8Array<ArrayBufferLike>;
            encryptedShares: Uint8Array<ArrayBufferLike>[];
            encryptedRandomness: Uint8Array<ArrayBufferLike>;
        };
        $kind: "BonehFranklinBLS12381";
    };
    ciphertext: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Aes256Gcm: {
            blob: number[];
            aad: number[] | null;
        };
        Hmac256Ctr: {
            blob: number[];
            aad: number[] | null;
            mac: Uint8Array<ArrayBufferLike>;
        };
        Plain: {};
    }, "Aes256Gcm" | "Hmac256Ctr" | "Plain">;
}, {
    version: number;
    packageId: string | Uint8Array<ArrayBufferLike>;
    id: string;
    services: Iterable<readonly [string | Uint8Array<ArrayBufferLike>, number]> & {
        length: number;
    };
    threshold: number;
    encryptedShares: {
        BonehFranklinBLS12381: {
            nonce: Iterable<number>;
            encryptedShares: Iterable<Iterable<number>> & {
                length: number;
            };
            encryptedRandomness: Iterable<number>;
        };
    };
    ciphertext: import("@mysten/bcs").EnumInputShape<{
        Aes256Gcm: {
            blob: Iterable<number> & {
                length: number;
            };
            aad: (Iterable<number> & {
                length: number;
            }) | null | undefined;
        };
        Hmac256Ctr: {
            blob: Iterable<number> & {
                length: number;
            };
            aad: (Iterable<number> & {
                length: number;
            }) | null | undefined;
            mac: Iterable<number>;
        };
        Plain: {};
    }>;
}>;
/**
 * The Move struct for the KeyServer object.
 */
export declare const KeyServerMove: import("@mysten/bcs").BcsType<{
    id: string;
    name: string;
    url: string;
    keyType: number;
    pk: number[];
}, {
    id: string | Uint8Array<ArrayBufferLike>;
    name: string;
    url: string;
    keyType: number;
    pk: Iterable<number> & {
        length: number;
    };
}>;
